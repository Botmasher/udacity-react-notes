/*
 * 	Why React?
 *	(pre-syntax concepts)
 */



/* What makes React special?
	- compositional
	- declarative
	- data flow through components
	- it's just JS
 */



/* Composition
	- use intuitions about functions to create components
	- funcs take in params and returning values
	- components take in data and return some ui
 	- composition takes simple components and combines them together
 */
// https://www.linkedin.com/pulse/compose-me-function-composition-javascript-kevin-greene

// https://hackernoon.com/javascript-functional-composition-for-every-day-use-22421ef65a10
// 	- "a composable function should have 1 input argument and 1 ouptut value"
// 	- then you combine these in a compose function
const add = x => y => x + y;
const mult = x => y => x * y;
const add2mult3 = compose(add(2),mult(3)) 		// VS 	const add = (x + 2) * 3
const compose = (...functions) => data =>
	functions.reduceRight((value, func) => func(value), data)

// Example of composing functions to get some value
function getProfilePic(username) {
	return 'https://github.com/' + username + '.png?size=200';
}
function getProfileLink(username) {
	return 'https://github.com/' + username;
}
// invoking getProfileData returns an obj representing our user
function getProfileData (username) {
	return {
		pic: getProfilePic(username),
		link: getProfileLink(username)
	};
}

// Now imagine it returning UI instead
// Here it's "composition" to include pic and link components inside the profile component 
function ProfilePic(username) {
	return ( <img alt={username}
		src={'https://github.com/'+username+'.png?size=200'} /> )
}
function ProfileLink(username) {
	return <a href={'https://github.com/' + username}>{username}</a>
}
function Profile(username) {
	return (
		<div classname='profile'>
			<ProfilePic username='username' />
			<ProfileLink username='username' />
		</div>
	)
}




/* Imperative vs Declarative code
	- imagine I control temp with nobs: make hot / make cold
 	- I never directly talk about the state (temp itself); just accumulate it over time
 	- imagine instead I declare a temperature without nobs
 	- that's the state I set and it handles the imperative work for me
	- For React, this is like keeping the DOM in sync with my app while setting the states I want
*/

// loop as imperative - explicitly instructs how to loop and change
const exclams = ['A', 'Aaaa', 'Aaaaaah']
for (let i=0; i<exclams.length; i++) { }

// map and filter as declarative - sets state and lets JS handle looping
const shortExclams = exclams.filter(str => str.length<2)

// React as declar - not HOW to do it but just WHAT to do
// e.g. <button onClick = {activateLaser}>Activate Laserbeam!</button>

// https://tylermcginnis.com/imperative-vs-declarative-programming/
// 	- it's the logic not the control flow
// 	- instead of toggling a button highlight off and on, give it handleToggleHighlight and a highlight state

// https://stackoverflow.com/questions/33655534/difference-between-declarative-and-imperative-in-react-js
//	- it's like saying you want a pizza instead of telling it how to make a pizza
// 	- obviously the framework needs to know how to make pizza, unlike Backbone




/* Data flow is UNIDIRECTIONAL (from parents to children)
	- two-way data bindings (e.g. Angular, Ember) reflect changes automatically in other places in the app
	- as the app grew, hard to tell how change in one place automatically and implicitly effects rest of app 
	- Track changes to state: React uses explicit method of passing data down between components

	[PARENT] ---- data -----> [CHILD]
	  |__<__<__ updates __<__<__|

	- data lives in the parent component (ONE place where the data is modified)
	- parent component passes data to the child
	- any updated data are passed back up to the parent
	- parent component performs the actual updates
*/

// FlightPlanner and LocationPicker are parents and could be in charge of data storage & updates
<FlightPlanner>
	<LocationPicker>
		<OriginPicker />
		<DestinationPicker />
	</LocationPicker>
	<DatePicker />
</FlightPlanner>




/* React is just JS!
 	- API is pretty small, not recreating functionality already present in JS
 	- React depends on functional programming paradigm that's made big impact in JS community
 	- .map and .filter are vital techniques
 	- remember that .map returns a new array, not a modified original array!
*/

// use builtin .map method for creating list items
const friends = ['me', 'you', 'Tsaggui', 'doggies'];
<ul>
	{ friends.map(name => (
		<li>{name}</li>
	))}
</ul>

// a bunch of strings containing mapped data
const musicData = [
    { artist: 'Adele', name: '25', sales: 1731000 },
    { artist: 'Drake', name: 'Views', sales: 1608000 },
    { artist: 'Justin Bieber', name: 'Purpose', sales: 554000 }
];
const albumSalesStrings = musicData.map((album) => {
    return `${album.name} by ${album.artist} sold ${album.sales} copies`; 
});

// or filtering that data
const albumShortNames = musicData.filter(album => album.name.length <= 25);

// filtering plus mapping
const albumPopularArtists = musicData.filter(album => album.sales > 1000000).map((album) => {
	return `${album.artist} is a great artist`;
});

// REFACTOR CHALLENGE
//	- does your existing code have for loops that could be changed to .map?
// 	- does your existing code have if statements that could be changed to .filter?

// Virtual DOM 			facebook.github.io/react/docs/optimizing-performance.html#avoid-reconciliation
// - state of nodes and decides whether current virtual DOM is equivalent
// - checks vDOMEq (are virtual DOMs equiv?) and SCU (should components update?)
// 		- tree of all possibilities in link above
// - if shouldcomponentsupdate returns false (defaults to true), doesn't bother checking node or beyond

// Diffing Algorithm 	facebook.github.io/react/docs/reconciliation.html#the-diffing-algorithm
// 	- same type changes are easy, e.g. classname of an element, keeping the same DOM node
// 	- inserting an additional li is naively easy, involving one change
// 	- inserting a new first li is naively not, involving changing every li after that
// 		- supports keys so that your list items do not rerender a whole list change to the DOM
<li key={item.id}>{item.name}</li>