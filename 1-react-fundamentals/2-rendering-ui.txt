/*
 * 	Rendering UI with React
 */


/* Rendering UI intro
	- React elements are light JS objects. They are NOT elements of the DOM!
	- because of this we use JS to put elements together
	- we describe what the page should look like then React manipulates DOM
	- components are custom elements often combining elements together
		- "the building blocks of React"
 */




/* Elements and JSX
	- React isn't built into browsers so no console testing
	- need a React environment
	- .createElement() and render()
		- React.createElement (type, properties, content)
		- attribs FOR and CLASS are accessed by label.htmlFor and div.className
	
	- we don't create real DOM elements, we tell React to .render and it does that

	- typically we use .Component for React's reusable pieces of code
		- .render() is the ONLY method absolutely required in any React component class
 	
 	- ultimately, remember that React is only concerned with View layer of app
 	
 	- you should think in components
 		https://facebook.github.io/react/docs/thinking-in-react.html

 	- each component should follow the single responsibility principle: "just do one thing!"
 		- check code for chance to decompose
 */

import React from 'react' 			// decoupled from rendering
import ReactDOM from 'react-dom' 	// bc working in browser - could do VR, other environments

let elem = React.createElement('div', null, 'txt!') 	// top-level API call to create plain JS obj!
ReactDOM.render(
	elem,								// render my element
	document.getElementByID('root') 	// into a DOM node
)

// if you console.log(elem), it's plain JS obj w a bunch of properties incl key:null, type:"div", ...
console.log(elem)

// React apps typically a single DOM root node, so this is a "hook" for our entire app
//	 - this is where React will take over and render our UI
<div id = 'root'></div>

// Add a class or other attribs:  facebook.github.io/react/docs/dom-elements.html#all-supported-html-attributes
elem = React.createElement('div', {
	className: 'welcome-message', 		// React is using DOM node className not HTML attribute class
}, 'hello!')							// bc DIVs have div.className, not div.class

// Nesting elems inside each other - the overall call only returns a SINGLE element
elem = React.createElement('div', null, React.createElement('strong', null, 'Hi!'))

const people = [{name:'Ayesir'}, {name:'Beesaur'}, {name:'Ceesimus'}]
elem = React.createElement('ol', null,
	people.map(person => (
		React.createElement('li', null, person.name) 	// React will complain we don't have a key
	))
)

// add a key to an array
elem = React.createElement('ol', null,
	people.map((person, index) => ( 							// remember 2nd arg of map is array index!
		React.createElement('li', { key: index }, person.name) 	// track changes to children as state changes
	))
)

// JSX as syntax for writing concise, nested JS code that's easier to follow
elem = <ol>
	<li>{people[0].name}</li> 		// curly braces for evaluating some valid JS expression
</ol>

elem = <ol> 						// we start in JSX
	{people.map(person => ( 		// inside there's some JavaScript - a map func
		<li>{person.name}</li> 		// return value is some more JSX with JavaScript within it
	))}
</ol>

elem = <ol>
	{people.map((person,index) => {
		<li key={index}>{person.name}</li> 	// we were still missing that crucial key!
	})}
</ol>

// the above code is still compiling down to JS: _react2.default.createElement(elem,...)

// To be clear, both of these generate the SAME output!
elem = React.create('ol', null, people.map((p, i) => (
		React.createElement('li', { key: i }, p.name)
	))
)
elem = <ol>
	{people.map(p,i) => (
		<li key={i}>{p.name}</li>
	))}
</ol>

// JSX elements MUST return a single root elem, just like React.createElement does
const thisWillError = (<h1>Some title<h1><h2>My subtitle</h2>);

// group elements together into factories to generate our own custom elements
class ContactList extends React.Component { 	// could also see: class ContactList extends Component
												// if import was:  import React, { Component } from 'react'
	// only required method is render! 		
	render() { 
		const people = [
			{name:'Ayesir'},
			{name:'Beesaur'},
			{name:'Ceesimus'}
		]

		return <ol>
			{people.map((person,index) => (
				<li key={index}>{person.name}</li>
			))}
		</ol>
	}
}
ReactDOM.render(
	<ContactList/>,
	document.getElementByID('root')
)




/* Create a React App
	- JSX does need to be transpiled
	- use Babel to accomplish that
		- run it through a build tool like Webpack
		- this bundles our assets (html, css, imgs, ...) for web projects
	- use FB's Create React App package to manage all the setup for us
		- touted as zero-setup solution!
		- install it through npm

		npm install -g create-react-app

	- https://github.com/facebookincubator/create-react-app
	- now have react, react-dom and react-scripts
 		- react-scripts: installs Babel so we can use JSX and latest ES6
 		- react-scripts: installs Webpack to generate the build

 	- navigate to apps or project superdirectory and create your project

		create-react-app contacts

 	- you can now use Yarn or just npm to start (mostly swappable)
	- Yarn by FB from ground up to improve on slow/lacking aspects of NPM

		cd contacts
		npm start

	- now poke around the file directories
	- App.js: 				you'll find starter code in App.js
	- index.js: 			this is where the rendering is happening
	- public index.html: 	the html doc that all this JS is running in (incl <div id="root"></div>)
	- readme: 				detailed instructions and guide
 */




/* Composing with Components
	- these are the main building blocks React gives us
	- break down the UI into small pieces with clear responsibility and well-defined interfaces
	- work on tiny pieces of app without impacting others
	- build using composition instead of inheritance

	- in practice, this is bundling stuff into a class
	- then you can use this component like <ContactList/>
		- duplicate like <ContactList/><ContactList/>
		- edit properties (props) by accessing this.props... in a class
		- props allow independent configurations of a component

	- "Favor composition over inheritance"
		- only extend once
		- make sure each component is useful on its own
 */

// use props to make contactlist component reusable and change who's in the list
class ContactList extends React.Component {
	render() { 
		const people = this.props.contacts 			// store prop passed to ContactList

		return <ol>
			{people.map((person,index) => (
				<li key={index}>{person.name}</li>
			))}
		</ol>
	}
}
class App extends React.Component {
	render() {
		return (
			<div className="App">
				<ContactList contacts = {[ 		// where I pass to the prop
					{name: 'Ayesir'},
					{name: 'Beesaur'},
					{name: 'Ceesimus'}
				]} />
			</div>
		);
	}
}