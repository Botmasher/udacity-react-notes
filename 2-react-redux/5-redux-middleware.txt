/*
	2. Redux
	5. Redux Middleware
 */


/* 1-2. What is middleware?
	- code that intercepts a request or a process
	- redirecting it or producing side-effect
	- in Redux it's between dispatching of action and reducer
	"third-party extension point between dispatching an action, and the moment it reaches the reducer"

	- It receives an action and then can do many things e.g.
		- side effects like logging state
		- processing action on its own (like HTTP async request)
		- redirecting the action (like to some other middleware)
		- running code during dispatch
		- dispatching a supplementary action

	- Notice this is all within the same pattern of state mgmt that Redux follows
 */




/* 3. Implementing middleware
	
	- createStore() can take in a second arg, an "enhancer"
		store.createStore(reducer, [preloadedState], [enhancer])
	- using the redux applyMiddleware() enhancer, we can add multiple middleware
	
	Logger middleware
	- recall that we're thinking of Redux as a "predictable state container" for the app
	- so why not see store's state before and after a reducer processes the action?
	- you could use redux-logger package, but let's make some middleware

 */

// first import applyMiddleware() from redux
import { createStore, applyMiddleware, compose } from 'redux';

// set up a logger
const logger = store => next => action => {
	console.group(action.type);
	console.info('dispatching', action);
	let result = next(action);
	console.log('next state', store.getState());
	console.groupEnd(action.type);
	return result;
};

// apply logger as middleware
const store = createStore(
	reducer, 
	applyMiddleware(logger)
);

// but wait, we wanted to use our devtools extension too!
// this is a common theme with redux, we need to compose these together
// so let's do a compose function
const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;

const store = createStore (
	reducer,
	composeEnhancers(applyMiddleware(logger))
);




/* 4. Thunks
 	- one of most common uses of middleware: SYNCHRONICITY
 	- without this, redux store only supports synchronous flow of data (see the schema throughout course)
 	- so what if we want app to interact with server?
 		1) make request
 		2) request is resolved
 		3) and only THEN do we dispatch an action
 	
 	- redux-thunk package gives us "thunks"
 	- these allow us to write different action creators
 	- these action creators return a function rather than an object
 	- middleware can intercept these function actions before triggering a dispatch

 	How to think about thunk:
 	- It's a wrapper around the store's dispatch() method
 	- It provides "Thunk action creators" that return a function
 	- Instead of returning objects, we can use those action creators to dispatch a func or Promise

	Async without Thunks:
	- we COULD still do async using React
	- like we could use componentDidMount()
	- but thinking in Redux we want two things:
		(1) Reusability: again, this is composition
		(2) Predictability: action creators are the source of state updates, so lifecycle events shouldn't also be!

	Installation:
		npm install --save redux-thunk
 */

// example of using thunk middleware to async HTTP request to fetch a logged-in user's to-do list from a db
// store.js
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import rootReducer from '../reducers/root_reducer';

	// instance of thunk passed to redux enhancer func
const store = () => createStore(rootReducer, applyMiddleware(thunk));

export default store;


// imagine the HTTP req looks like this
// util/todos_api_util.js
export const fetchTodos = () => fetch('api/todos');

// now our function-returning action creator can look like this
// actions/todo_actions.js
import * as TodoAPIUtil from '../util/todos_api_util';

export const RECEIVE_TODOS = "RECEIVE_TODOS";

export const receiveTodos = todos => ({ 	// action creator returning an action object
	type: RECEIVE_TODOS,
	todos
});

export const fetchTodos = () => dispatch => ( 	// set up Promise and dispatch todo action ONLY when req resolves
	TodoAPIUtil.fetchTodos()
	.then(todos => dispatch(receiveTodos(todos)))
);

/*
	Why can't I do this without thunk?
 	- try writing fetchTodos() without redux-thunk; you can only return an object!
 	- reducers only take in a plain JS object after all

 	What is thunk doing under the hood?
 	- see a snippet of the source code below!
 */

function createThunkMiddleware(extraArgument) {
	return ({ dispatch, getState }) => next => action => {
		if (typeof action === 'function') { 	// intercept actions of type function before dispatch generated
			return action(dispatch, getSate, extraArgument); 	// getState allows reading current state of store
		}
		
		return next(action);
	};
}

const thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;

export default thunk;

// So start using this Redux technique to delay an action, including when you need to make an API request!



/* 5. App Structure & Organization
	- make it easier to find files
	- make it easier to move files around ("modularity")

	1. By Capability
	- Strategy: know where to look for certain types of assets
	- Example: the real-world example from Redux is structured this way
	- Pro: Easy to know where each asset type belongs and is found
	- Con: What if a component's requirements change? Have to find and change related actions, reducers, etc. 

		Frontend
		- Components
			- component1.js
			- component2.js
			- component3.js
		- Actions
			- action1.js
			- action2.js
		- Reducers
			- reducer1.js
	    - Util
	    - Store

	2. By Feature
	- Strategy: group assets by the concept they share
	- Example: 
	- Pro: visually express what your application is about
	- Con: if you have hundreds of components it's difficult to navigate

		- nav
			- actions.js
			- index.js
			- reducer.js
		- dashboard
			- actions.js
			- index.js
			- reducer.js

	- The choice is yours! Consider features, scale and dependencies in your app:
		1) What are your features?
		2) What is the app's scale? Many features? A few really complex ones?
		3) What are your dependencies?
 */




/* OUTRO
 	- think about how you'd use middleware
 	- think about directory structure

 	- me extra: Hot Reloading
 		- good for dev to save your state while testing and reloading
 		- so you don't have to make code change and come get to same point in app
 	- me extra: Time Travel Debugging
 		- go back to previous points in state
 		- like in a todo list, add the previous item again
 		- or imagine a QA tester who found a bug just packaging up the action and state history!
 	https://code-cartoons.com/hot-reloading-and-time-travel-debugging-what-are-they-3c8ed2812f35

 	- In the outro it seems this middleware section was added to how we architected our store
 		- me: makes sense given where we introduce middleware enhancers, both in theoretical flow and in the code
 */