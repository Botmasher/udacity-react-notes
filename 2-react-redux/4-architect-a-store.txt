/*
	2. Redux
	Lesson 4: Architect a Redux Store
 */




/* 1. Introduction
	- so far our stores are limited to one reducer
	- this works fine for many small apps
	- let's build towards complex applications
	- let's also make sure we keep the data sane and maintainable
 */




/* 2. combineReducers
	- consider a hypothetical book reducer
		1) a book action is dispatched
		2) the book reducer is called
		3) the reducer returns the book state
	- but what if we extended it to deal with user actions?
		- one option is to modify the book reducer to handle user actions
		- more ideal is to add a reducer to handle user actions
	
	- Wait, Redux createStore() only takes a single reducer!
		- create a root reducer one lvl up that calls both user and book reducers
 */

// hypothetical added "users" reducer
function users (state={}, action) {
	switch (action.type) {
		case 'ADD_USER':
			return {};
		case 'REMOVE_USER':
			return {};
		default:
			return state;
	}
}

// now the hypothetical two reducers
function users (state={}, action) { ... }
function books (state={}, action) { ... }

/*
	"Reducer Composition"
	- we separated those two out
	- "to handle distinct, independent slices of state"
	- but again Redux.createStore() only accepts ONE reducer
 
 	Back to Udacimeals - when we get API response, where to save recipe in our store?
 	- we could grab the whole recipe object and stick it in the meal
 	- but what if we wanted the same dinner monday and tuesday? DUPES!
 	- Redux: do NOT duplicate data
 	1) make a brand new .food property beside the .calendar property on our state object
 	2) go inside reducers/index.js and make a brand new reducer
 		- this will be a food() reducer
 */

// new reducers index.js food() reducer
function food(state={}, action) {
	switch (action.type) {
		case ADD_RECIPE:
			const { recipe } = action;
			return {
				...state,
				[recipe.label]: recipe
			};
		default:
			return state;
	}
}
	// now the ADD_RECIPE action dispatch modifies both calendar and food
	// but take a look at your exports - it's the calendar reducer

// make sure in the base app's index.js you're importing reducer from '.reducers/'

/*
	combineReducers()
	- as app grows we often want to have nested objects
	- we want to practice "reducer composition"
		- using multiple reducers
		- with each reducer "responsible for separate, independent portions of state"
		- so below each reducer will be responsible only for, say, users or comments
		{
			users: {},
			comments: {},
			replies: {}
		}
	- the action->reducer pattern still holds in scale
		- each reducer gets section of state
		- each reducer gets an action
		- each reducer returns a new, unmodified section of that same state

	To accomplish what we've been teasing at we:
	1) create separate reducers (like the food vs calendar reducers)
	2) use the Redux combineReducers() method
		- turns an object with multiple reducer functions into a single reducer function
		- we pass this one root reducer into createStore()
		- main reducer calls every child reducer and gathers results
		- gathered results are a new single unified state object
 */

// example of writing a /reducers/root_reducer.js
import { combineReducers } from 'redux';

function users(state={}, action) { ... }
function books(state={}, action) { ... }

export default combineReducers({users, books,});


// example importing and setting up the store in /store/store.js
import rootReducer from '../reducers/root_reducer'

const store = createStore(rootReducer);
console.log(store.getState()); 			// logs  { users: {}, books: {} }


// Now bring it into Udacimeals
// back in /reducers/index.js
import { combineReducers } from 'redux';
...
export default combineReducers({food,calendar});
	// check the Redux console to see that you have a food property in the state store
	// you're exporting the COMBINED VALUE of combineReducers here

// within App.js - mapStateToProps is receiving BOTH calendar AND food now
//  - conceptually, calendar now stores food (like calendar:{monday:{breakfast:'pizza'}} )
//  - and all of the food's information can be found under food[id]
//  - so update App state to reflect that we're storing food items not just food names 
// 	- we're now getting calendar as well as food as an object from reducers, so decompose
function mapStateToProps({calendar, food}) {
	calendar: dayOrder.map((day) => {
		day,
		meals: Object.keys(calendar[day]).reduce((meals, meal) => {
			meals[meal] = calendar[day][meal]
			? food[calendar[day][meal]] 		// make sure we're getting the actual food item
			: null
		})
	})
}

/*	After you update your Udacimeals, answer T or F:
	- an alternative to combineReducers() is to pass multiple reducers to createStore()
	- you import combineReducers() from react-redux
	- combineReducers() takes one object as its argument
	- combineReducers() returns one reducer that can be passed in to create the store


	And this quiz: what's wrong with the following root reducer?

	import { combineReducers } from 'redux';
	import booksReducer from './books_reducer';
	import userReducer from './user_reducer';

	const rootReducer = combineReducers(booksReducer, userReducer);

	export default rootReducer;

 */




/* 3. Normalization
 	- we've seen encapsulation of pieces of state into indiv reducers
 	- now focus on architecting store to be (1) easy to reason about and (2) more performant
 	- this process is "normalization of state shape"
 		- a few choices to follow
 		- objective of making sure app runs smoothly

 	Rules
 	1) Do not duplicate data
 		- violates Single Source of Truth 
 		- wastes resources syncing data
 	2) Keep store as shallow as possible
 		- deeply nested data updates get complex quickly

	Redux recommends:
	1) as normalized as possible, without any nesting
	2) every entity is in an object with ID as a key
	3) use ID to reference entity from other entities or from lists
 */

// example of properly referencing info for a list of friends
const people = {
	kassim: {
		name: 'Kassim K',
		age: 24,
		favoriteIceCream: 'vanilla'
	},
	tyler: {
		name: 'Tyler T',
		age: 25,
		favoriteIceCream: 'chocolate'
	},
	amy: {
		name: 'Amy A',
		age: 26,
		favoriteIceCream: 'strawberry'
	}
};
const friends=['amy','kassim'];
const friendsInfo = friends.map(friend => people[friend]);

// example of crazy nested structure not to use
const books = {
	fiction: {
		fantasy: {
			0: {
				title: 'Harry Potter and the Nested Data',
				author: 'JK Rowling'
      		}
    	},
    	romance: {},
    	scifi: {}
  	},
  	nonFiction: {}
};
// imagine the reducer you need for the monster above!!
function books (state, action) {
 	const { bookType, genre, id, title } = action;
  	if (action.type = CHANGE_TITLE) {
    	return {
      		...state,
      		[bookType]: {
        		...state[bookType],
        		[genre]: {
        			...state[bookType][genre]: {
            			[id]: {
              				...state[bookType][genre][id],
              				title,
            			}
          			}
        		}
      		}
    	};
  	}
  	return state;
};

// To reiterate: "Normalization" means removing dupes and keeping data as shallow as possible.




/* 4. Finish the App!
	- use what we know about react-redux to build display grid for the meals calendar
 */

// first let's npm install react-icons

// then a couple imports
import { capitalize } from '../utils/helpers';
import CalendarIcon from 'react-icons/lib/fa/calendar-plus-o';

// now grab the mapped calendar and remove from props
...
	render () {
		const {calendar, remove} = this.props;
		const mealOrder = ['breakfast', 'lunch', 'dinner']; 	// also create our meals array
		return (); 
	}
}

// start creating the UI to render
// loop through meal types and create a horiz column for each meal
...
	render () {
		const {calendar, remove} = this.props;
		const mealOrder = ['breakfast', 'lunch', 'dinner'];
		return (
			<div className="container">
				<ul className="meal-types">
					{mealOrder.map(mealType => (
						<li key={mealType} className="subheader">{capitalize(mealType)}</li>
					))}
				</ul>
			</div>
		...

// now build out that grid
	...
		return (
			<div className="container">
				<ul className="meal-types">
					{mealOrder.map(mealType => (
						<li key={mealType} className="subheader">{capitalize(mealType)}</li>
					))}
				</ul>
				<div className="calendar">
					{/* create row header for each day */}
					<div className="days">
						{calendar.map(({ day }) => <h3 key={day} className="subheader">{capitalize(day)}</h3>)}
					</div>
					{/* map over calendar again to create list of meals for each day */}
					<div className="icon-grid">
						{calendar.map(({ day, meals }) => (
							<ul key={day}>
								{mealOrder.map((meal) =>
									<li key={meal} className='meal'>
										{meals[meal]
											?	<div className="food-item">
													<img src={meals[meal].image} alt={meals[meal].label} />
													<button onClick={() => remove({meal, day})}>Clear</button>
												</div>
											: 	<button className="icon-btn">
													<CalendarIcon size={30} />
												</button>
										}
									</li>
								)}
							</ul>
						))}
					</div>
				</div>
			</div>
		);
	}
}


/*
 	- Import the new index.css and you will see a grid
 	https://github.com/udacity/reactnd-udacimeals-complete/blob/master/src/index.css
 
 	- Get a unique key and ID for the Edamam recipes API
	- put your key and ID in an .env file in the root directory of your project
		REACT_APP_API_ID=YOUR-API-ID
		REACT_APP_APP_KEY=YOUR-APP-KEY

	- Now let's build a Modal with an input field!
		- when you click on a calendar icon
		- a modal with input field pops up
		- use the input to fetch that food or fetch that recipe from the API
		- then save food/recipe to our redux store
	1) install a spinner for loading
	2) install react modal as well
		npm install react-loading react-modal
	3) restart your dev server
	4) start importing
		import Modal from 'react-modal';
		import ArrowRightIcon from 'react-icons/lib/fa/arrow-circle-right';
		import Loading from 'react-loading';
		import { fetchRecipes } from '../utils/api';
		import FoodList from './FoodList';
	5) set up your app's local state for the modal 
 */

// number 5, setting up the state
state = {
	foodModalOpen: false,
	meal: null,
	day: null,
	food: null,
	loadingFood: false
}

// 6) now you need methods for toggling the modal and for fetching recipes from the API
openFoodModal = ({ meal, day }) => {
	this.setState(() => ({
		foodModalOpen: true,
		meal,
		day
	}));
};
closeFoodModal = () => ({
	this.setState(() => ({
		foodModalOpen: false,
		meal: null,
		day: null,
		food: null
	}));
});
searchFood = (e) => {
	if (!this.input.value) {
		return;
	}
	e.preventDefault();
	this.setState(() => ({loadingFood : true}));
	fetchRecipes(this.input.value)
	.then((food) => this.setState(() => ({
		food,
		loadingFood: false
	})));
};
// above: we HAVEN'T stored food yet
// since we get back an array of food
// what we'll do is save it to local state, then submit it to redux when we pick an actual food

// 7) now in render method grab some of that state by destructuring AND selectRecipe additionally from props
render() {
	const { foodModalOpen, loadingFood, food } = this.state;
	const { calendar, remove, selectRecipe } = this.props;
}

// 8) when unassigned meal calendar button is clicked, open a modal
	// conceptually keep in mind where these are coming from in the maps
	<button onClick={() => this.openFoodModal({meal, day})} className="icon-btn">
		<CalendarIcon size={30} />
	</button>

// 9) now some copy-paste code to render modal
	<Modal
      className='modal'
      overlayClassName='overlay'
      isOpen={foodModalOpen}
      onRequestClose={this.closeFoodModal}
      contentLabel='Modal'
    >
      <div>
        {loadingFood === true
          ? <Loading delay={200} type='spin' color='#222' className='loading' />
          : <div className='search-container'>
              <h3 className='subheader'>
                Find a meal for {capitalize(this.state.day)} {this.state.meal}.
              </h3>
              <div className='search'>
                <input
                  className='food-input'
                  type='text'
                  placeholder='Search Foods'
                  ref={(input) => this.input = input}
                />
                <button
                  className='icon-btn'
                  onClick={this.searchFood}>
                    <ArrowRightIcon size={30}/>
                </button>
              </div>
              {food !== null && (
                <FoodList
                  food={food}
                  onSelect={(recipe) => {
                    selectRecipe({ recipe, day: this.state.day, meal: this.state.meal })
                    this.closeFoodModal()
                  }}
                />)}
            </div>}
      </div>
    </Modal>

    <Modal
      className='modal'
      overlayClassName='overlay'
      isOpen={ingredientsModalOpen}
      onRequestClose={this.closeIngredientsModal}
      contentLabel='Modal'
    >
      {ingredientsModalOpen && <ShoppingList list={this.generateShoppingList()}/>}
    </Modal>

/// 10) Make sure you have the FoodList and ShoppingList components
// https://github.com/udacity/reactnd-udacimeals-complete/blob/823876c8e3b669c0338f630fa50120adb7168f6f/src/components/FoodList.js
// https://github.com/udacity/reactnd-udacimeals-complete/blob/0e343838ef120c458f3b3b4a5de74dbc167be4d6/src/components/ShoppingList.js


// 11) now let's make sure inside the modal are all of the food ingredients for the week
import ShoppingList from './ShoppingList';
...
state = {
	...
	ingredientsModalOpen: false 	// added for ingredients modal
}

// 12) now some open/close ingredients modal methods and especially the ability to generate our shopping list
openIngredientsModal = () => this.setState(() => ({ ingredientsModalOpen: true }));
closeIngredientsModal = () => this.setState(() => ({ ingredientsModalOpen: false }));
generateShoppingList = () => {
	// get all meals and push them into a single array
	return this.props.calendar.reduce((result, { meals }) => {
		const { breakfast, lunch, dinner } = meals;
		breakfast && result.push(breakfast);
		lunch && result.push(lunch);
		dinner && result.push(dinner);
		return result;
	}, [])
	.reduce((ings, { ingredientLines }) => ings.concat(ingredientLines), []); 	// flatten the array
};
	// now you'll get array of all the different ingredients inside those meals

// 13) also destructure the open ingredients modal state to have easy access to it
const { foodModalOpen, loadingFood, food, ingredientsModalOpen } = this.state;

// 14) add the header with a way to open that modal
<div className="container">
	<div className="nav">
		<h1 className="header">Udacimeals</h1>
		<button
			className="shopping-list"
			onClick={this.openIngredientsModal}
		>
			Shopping List
		</button>
	</div>
...

/// 15) make sure you have that ingredients modal already set up


/*
	That's it for now. Time to move onto Middleware for adding new features to our store.
 */
