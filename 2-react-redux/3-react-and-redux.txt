/* 2. Redux
 * Lesson 3: React and Redux
 */


/* 1. Introduction
	- everything so far (see especially lesson 2) as framework agnostic
	- dispatch(), getState(), subscribe() worked fine for small app
	- but we need the right abstraction to make this work

	Benefits of react-redux
	- made by Redux devs
	- easy to dispatch actions and access store from within components
	- use the Provider component and connect() method
		- connect() specifies which components receive which data

 */




/* 2. Provider
	
	- Provider avoids "prop threading" (passing down data thru props, from last time)
	- Provider wraps the entire app so subcomponents receive store data directly

	1) install Provider so can use it:	npm install --save react-redux
	2) remove vanilla redux complexity from App.js; just a <div>Hello world</div>
	3) remove the action creator import from App.js
	4) open src/index.js and think about store being passed to App
		- what if a lot of components need store?
		- like if they're getting data or doing lots of dispatching of actions
		- we'd have to pass store around to all those components!
	5) import Provider into src/index.js
	6) solve #4 by wrapping <App /> inside of a <Provider></Provider>
		- this will handle passing store around your components
		- later we'll discuss how components use it to dispatch actions
	7) pass the store into that Provider's props

 */

// index.js - import provider
import { Provider } from 'react-redux';
...
	<Provider store={store}><App /></Provider>, ...

/*
	What's react-redux Provider's magic?
	- it leverages React's 'context' API
	- look that up to see them warn you it's experimental
		- you should just use Redux instead, haha
	- .connect() passes data through component tree automatically
		- no more manually passing props
	- it sets the store context, then provides store context to all subcomponents
		- it does not provide API endpoints to the store
		- it does not provide action creators to the store
 */




/* 3. Currying
 	- .connect() relies on currying
 	- also called "partial application"
 	- a function that takes only partial information and returns a function
 	- it basically delays doing all the work of the function
 */

// my example
function sum (a) {
	return function totalSum (b) {
		return (a+b);
	};
}

// do all of the work at once without delaying
sum(1)(2); 	// returns 3

// do some of the work but store the closure so info can be used later
const addOne = sum(1);
// later that day...
addOne(2); 	// returns 3

/* Double invocation? Say what?!?
	- take a moment and break it down: sum returns a <Function>
	- you can invoke that returned func (passing any required args)
	- or you can store it for later
	- this can of course lead to nested closures invoked by concatenated parens sets
 */
function doThisNow() {
	console.log('Wait for it...');
	return function thenThis() {
		console.log('...wwwwait for iiiiiit...');
		return function andFinallyThat() {
			console.log('BLAMMZ!');
		};
	};
}
let andAgain = doThisNow();
andAgain = andAgain();
andAgain = andAgain();

/* Quiz: write a housebuilder function
	- it outputs the number of stories and the color of a house
	- it returns a function
	- returned closure can pass around the number of stories before the color is chosen
 */




/* 4. Connect
	- import connect from the react-redux package
	- makes it possible to map both store state and store dispatch to a component
	- its signature is interesting:
		
		connect(mapStateToProps, mapDispatchToProps)(MyComponent)
		
		- MyComponent is the component to receive store state, or store dispatch, or both
		- mapStateToProps() is a function you define that:
			- subscribes to store updates
			- is called anytime store updates (given the above)
			- receives current store (and, optionally, your own current props)
			- you must use store (and props) to return a plain object
			- that object will be merged into the component's props
		- mapDispatchToProps() is a function you define that:
			- allows wrapping action creators inside of dispatch

	mapStateToProps() can be thought of as a func that lets connect() know how
	to map store state onto usable props!

	mapDispatchToProps() can be thought of as a func that lets you bind dispatch()
	to your action creators before they ever hit your component
	It sounds like both of these funcs are optional.
 */

// map state to props if you pass it to connect (in documentation: "if this argument is specified")
mapStateToProps(state, [ownProps]) { /*...*/ }

// example of in-app use
import { connect } from 'react-redux';

const User = ({ name, age }) => {
	// ... whatever the User functional component renders
};

const mapStateToProps = (state, props) => ({
	name: state.user.name,
	age: state.user.age
});

export default connect(mapStateToProps)(User); 	// now store name and age are passed as props to User


// ownProps as optional argument - convenient way to access props being passed to the component
	// - great case: when filtering some data based on User
// imagine this example is in a MyPhotos component:
const mapStateToProps = (state, ownProps) => ({
	// so wherever we write this we can still access MyPhoto's .user props
	photos: state.photos.filter(photo => photo.user === ownProps.user)
});
export default connect(mapStateToProps)(MyPhotos);




// ---- HAVEN'T IMPLEMENTED BELOW HERE ----

/*
	Now let's apply this to our App!
	1) go to App.js and import connect from react-redux
	2) App.js also export default connect()(App)
	3) log your component's this.props to see that you're now able to call dispatch
	4) now connect your component to your store to get the data in the store
	5) 
 */

// App.js - set up connect
import { connect } from 'react-redux';
...
export default connect()(App);

// now check out what your App's props are!
	...
	render() {
		console.log(this.props); 	// you'll see the dispatch function!
		return (
			...
		)
	}
	...

// connect component to the store - write mapStateToProps() OUTSIDE class scope
function mapStateToProps(calendar) {	// we're calling our store state 'calendar'
	return {
		name: 'Beacon'				// console.log(this.props) in App now shows we have a .name
	}
}
export default connect()(App);

/*
	NOW let's prepare for our calendar GRID!
	- it's kind of the nature of React with Redux that you want data stored in objects
	- it's also the nature of layouts that we want array-like structures, not JSON-like ones
	- so we'll do the grinding thing of converting everything in our calendar store to array
 */
function mapStateToProps(calendar) {
	// days of the week for us to map over as we build our array
	const dayOrder = ['sunday','monday','tuesday','wednesday','thursday','friday'];
	// recall the structure of our calendar object in the store to understand this buildup
	return {
		calendar: dayOrder.map((day) => ({ 		// console.log(this.props) to see nice formatted array
			day,
			meals: Object.keys(calendar[day]).reduce((meals, meal) => {
				meals[meal] = calendar[day][meal]
					? calendar[day][meal]
					: null
				return meals
			}, {})
		});
	}
}
export default connect()(App);


/* 
	mapDispatchToProps()
		- a connect()ed component will automatically be passed Redux dispatch() method
		- can use standard .dispatch() through the props passed in (this.props.dispatch)
			- as you recall, this involved passing it the action creator
			- like dothing = () => { this.props.dispatch(actionCreator({})) }
		- OR can clean up a bit with mapDispatchToProps()
			- binds dispatch to your action creators before they hit your component
			- is COMPLETELY optional, "not convinced it makes things that much cleaner"
			- it adds methods to the component's props
			- when these funcs are called, automatically dispatch the action
 */

// example of dispatching in a component
import React, { Component } from 'react';
import { connect } from 'react-redux';
import { updateName } from './actions';

class User extends Component {
	state = { name: '' }
	handleUpdateUser = () => {
		this.props.boundUpdateName(this.state.name);
	}
	render() {
		/* ... */
	}
}

export default connect()(User);


// instead use mapDispatchToProps to bind dispatch() to action creators before they hit component
import React, { Component } from 'react';
import { connect } from 'react-redux';
import { updateName } from './actions';

class User extends Component {
	/* ... */
}

function mapDispatchToProps = dispatch => ({ 		// add a react-redux mapDispatchToProps
	boundUpdateName: (name) => dispatch(updateName(name))
});

export default connect(null, mapDispatchToProps)(User); 	// pass into the component's connect


// App.js - apply it to your App component
import { addRecipe, removeFromCalendar } from '../actions'; 	// import your action creators
	// could go on to use dispatch exactly like what we did with vanilla Redux

// OR we could mapDispatchToProps
function mapDispatchToProps(dispatch) {
	return {		// what we return will be passed as props
		selectRecipe: (data) => dispatch(addRecipe(data)),
		remove: (data) => dispatch(removeFromCalendar(data))
	};
}
export default connect(mapStateToProps, mapDispatchToProps)(App);
	// - now instead of using this.props.dispatch, can do this.props.selectRecipe({})
	// - look at your props in the Redux tools to see component now has these cleaner props

/*
 	/!\ I see the props BUT the text no longer updates. /!\ 
 	The instructor does not test app in video but our App.js connect code matches. Onward!
 */