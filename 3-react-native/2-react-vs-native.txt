/*
		Lesson 2: React vs React Native 
		React Native

		- see how differ from UI and UX perspective
		- components that React Native comes with
		- integrate Redux into a React Native app
 */


/* 2. Web vs Native
		- React Native lets you captialize on web dev experience
		- BUT mobile apps are very diff
		- here's what to watch out for:

		(1) animations: button presses, transitions, other subtle feedback is normal for mobile users
			- tell a story about how your app works (return to this in lesson 5)
		(2) navigation: routers function as a STACK, pushing and popping individual screens as needed
			- so a screen is not just a URL mapped to a UI component!
		(3) Android vs iOS design
			- Android: Google's Material Design
				https://material.io/guidelines/material-design/introduction.html
			- iOS: Apple's Human Interface Design
				https://developer.apple.com/ios/human-interface-guidelines/overview/themes/
			- so design to make sure each app FEELS LIKE an Android app vs an iOS app
		(4) Android vs iOS navigation
			- Android devices have navigation bar at bottom of screen, universally allowing users to back/fwd btwn screens
			- iOS devices must implement their own navigation (including a back button, maybe a nav bar)
			- tab navigation (to access high-level content): bottom of screen in iOS, top in Android
				- explore React Native's TabNavigator in Lesson 4
 */

/* 3. Common React Native Components
	- not access to elements provided by HTML spec unlike dev for web
	- <View></View> and <Text></Text> components as analogous to <div></div> and <span></span>
	- View maps to Android.view and on iOS it maps to UIView
	- /!\ on web can have raw text not wrapped in span, but here MUST wrap c Text component else get error /!\
	
	- Triathlon Tracking App we'll be building
		- calendar with reminder to log info each day
		- every day selected you get data cards from that day on
		- log each exercise plus food and sleep
		- reset and clear info each day (on a day's card)
		- add/log a new entry
			- +/- buttons to add miles for running and biking, meters for swimming
			- slider bars to add hours for sleeping, rating for eating
		- simple happyface screen that says you already logged your info
		- last screen is a real-time tracker
			- heading (e.g. West)
			- altitude
			- current speed

	- this is a pretty big app, so expect lots of vids
	- "scrolling on the simulator is always a problem"

	- automatic access to icon sets by default, amounting to thousands of icons out of the box:
		https://expo.github.io/vector-icons

 */

// example importing icons
import { Ionicons } from '@expo/vector-icons';

// rendering icons - example App.js
export default class App extends React.Component {
	render() {
		render (
			<View style={styles.container}>
				<Ionicons name="ios-pizza" color="red" size={100} />
			</View>
		);
	}
}

// in OUR APP helpers.js - let's create a helper function for the metrics we're tracking
export function getMetricMetaInfo(metric) {
	const info = {
		run: {
			displayName: 'Run',
			max: 50,
			unit: 'miles',
			step: 1,
			type: 'steppers', 		// increment and decrement buttons in our UI (vs slider)
			getIcon() {
				return (
					<View>
						<MaterialIcons
							name='directions-run'
							color={'black'}
							size={35}
						/>
					</View>
				)
			}
		},
		bike: {
			displayName: 'Bike',
			max: 100,
			unit: 'miles',
			step: 1,
			type: 'steppers',
			getIcon() {
				return (
					<View>
						<MaterialCommunityIcons
							name='bike'
							color={'black'}
							size={35}
						/>
					</View>
				)
			}
		},
		swim: {
			displayName: 'Swim',
			max: 9900,
			unit: 'meters',
			step: 1,
			type: 'steppers',
			getIcon() {
				return (
					<View>
						<MaterialCommunityIcons
							name='swim'
							color={'black'}
							size={35}
						/>
					</View>
				)
			}
		},
		sleep: {
			displayName: 'Sleep',
			max: 24,
			unit: 'hours',
			step: 1,
			type: 'silder',
			getIcon() {
				return (
					<View>
						<FontAwesome
							name='bed'
							color={'black'}
							size={35}
						/>
					</View>
				)
			}
		},
		eat: {
			displayName: 'Eat',
			max: 10,
			unit: 'rating',
			step: 1,
			type: 'slider',
			getIcon() {
				return (
					<View>
						<MaterialCommunityIcons
							name='food'
							color={'black'}
							size={35}
						/>
					</View>
				)
			}
		}
	};
	return typeof metric === 'undefined'
		? info
		: info[metric]
	;
}

// at the top of helpers.js
import React from 'react';
import { View } from 'react-native';
import { FontAwesome, MaterialIcons, MaterialCommunityIcons } from '@expo/vector-icons';
import { white } from './colors';


// now let's use our MetricMetaInfo into a component!
	// - Create folder: 	./components
	// - Create file:  		AddEntry.js

// inside AddEntry.js
import React, { Component } from 'react';
import { View, Text } from 'react-native';
import { getMetricMetaInfo } from '../utils/helpers';

export default class AddEntry extends Component {
	render () {
		return (
			<View>
				{getMetricMetaInfo('bike').getIcon()}
			</View>
		);
	}
}

// inside App.js
import AddEntry from './components/AddEntry';

export default class App extends React.Component {
	render() {
		return (
			<View><AddEntry /></View>
		);
	}
}

// now we need to handle our input buttons for user data we're tracking
// in AddEntry.js
export default class AddEntry extends Component {
	state = {
		run: 0,
		bike: 0,
		swim: 0,
		sleep: 0,
		eat: 0
	};
	increment = (metric) => {
		const { max, step } = getMetricMetaInfo(metric);
		this.setState((state) => {
			const count = state[metric] + step;
			return {
				...state,
				[metric]: count > max ? max : count
			};
		});
	};
	decrement = (metric) => {
		this.setState((state) => {
			const count = state[metric] - getMetricMetaInfo(metric).step;
			return {
				...state,
				[metric]: count < 0 ? 0 : count
			};
		});
	};
	slide = (metric, value) => {
		this.setState(() => ({
			[metric]: value, 
		}));
	};
	...
}


// build out the very minimal UI for sliders and steppers
// - create UdaciSlider.js
import React from 'react';
import { View, Text } from 'react-native';

export default function UdaciSlider () {
	return (
		<View>
			<Text>UdaciSlider</Text>
		</View>
	);
}

// - create UdaciSteppers.js
import React from 'react';
import { View, Text } from 'react-native';

export default function UdaciSteppers() {
	return (
		<View>
			<Text>UdaciSteppers</Text>
		</View>
	);
}


// inside AddEntry.js
import UdaciSlider from './UdaciSlider';
import UdaciSteppers from './UdaciSteppers';

// don't just render but get specific type each metric cares about
...
	render () {
		const metaInfo = getMetricMetaInfo();
		return (
			<View>
				{Object.keys(metaInfo).map((key) => {
					const { getIcon, type, ...rest } = metaInfo[key];
					const value = this.state[key];
					return (
						<View key={key}>
							{getIcon()}
							{type === 'slider'
								? <UdaciSlider
										value={value}
										onChange={(value) => this.slide(key, value)}
										{...rest}
									/>
								: <UdaciSteppers
										value={value}
										onIncrement={() => this.increment(key)}
										onDecrement={() => this.decrement(key)}
										{...rest}
									/>
							}
						</View>
					);
				})}
			</View>
		);
	}
}

//  you should now be getting steppers text for the top 3 and slider text for the bottom 2 metrics!

// Now compare final versions of app screens we're building to current; notice the date on the top

// create file: 	DateHeader.js
import React from 'react';
import { Text } from 'react-native';

export default function DateHeader ({ date }) {
	return (
		<Text>
			{date}
		</Text>
	);
}

// back in AddEntry.js - import and render the date
import DateHeader from './DateHeader';
...
	return (
		<View>
			<DateHeader date={(new Date()).toLocaleDateString()} />
			...
		</View>
...

// App.js imports
import {
	Text,
	View,
	StyleSheet,
	TouchableHighlight,				// transform from primary color to another color when press on it
	TouchableNativeFeedback,
	TouchableOpacity,
	TouchableWithoutFeedback
} from 'react-native';

// App.js render
	handlePress = () => {
		alert('Hello!');
	};
	render() {
		return (
			<View style={styles.container}>
				<TouchableHighlight style={styles.btn} onPress={this.handlePress} underlayColor="#d4271b">
					<Text style={styles.btnText}>Touchable Highlight</Text>
				</TouchableHighlight>
			</View>
		);
	}
}
const styles = StyleSheet.create({
	container: {
		flex: 1,
		marginLeft: 10,
		marginRight: 10,
		alignItems: 'center',
		justifyContent: 'center'
	},
	btn: {
		backgroundColor: '#e53224',
		padding: 10,
		paddingLeft: 50,
		paddingRight: 50,
		justifyContent: 'center',
		alignItems: 'center',
		borderRadius: 5
	},
	btnText: {
		color: '#fff'
	}
});

// now try switching the button to TouchableOpacity instead
...
			<View style={styles.container}>
				<TouchableOpacity style={styles.btn} onPress={this.handlePress}>
					<Text style={styles.btnText}>Touchable Opacity</Text>
				</TouchableOpacity>
			</View>
...

// try TouchableWithoutFeedback - does nothing but doesn't work with Text child so have a View child
	// for special cases - /!\ avoid bc Native all about giving feedback to the user /!\
...
			<View style={styles.container}>
				<TouchableWithoutFeedback onPress={this.handlePress}>
					<View style={styles.btn}>
						<Text style={styles.btnText}>Touchable No Feedback</Text>
					</View>
				</TouchableWithoutFeedback>
			</View>
...

// finally check out TouchableNativeFeedback (Android only - subtle little ripple effect) - also no Text child
...
			<View style={styles.container}>
				<TouchableNativeFeedback
					background={TouchableNativeFeedback.SelectableBackground()}
					onPress={this.handlePress}>
					<View style={styles.btn}>
						<Text style={styles.btnText}>Touchable Android Feedback</Text>
					</View>
				</TouchableNativeFeedback>
			</View>
...

// AddEntry.js - handle submit on button click
	// - use time date formatter from utils helpers.js
import  { getMetricMetaInfo, timeToString } from '../utils/helpers';
...
	submit = () => {
		const key = timeToString();
		const entry = this.state;
		
		// Update Redux
		
		this.setState(() => ({
			run: 0,
			bike: 0,
			swim: 0,
			sleep: 0,
			eat: 0
		}));
		
		// Navigate to home
		
		// Save to db
		
		// Clear local notifications
	};
...

// also in AddEntry.js - create Submit Button UI above the AddEntry class
import { View, TouchableOpacity, Text } from 'react-native';

function SubmitBtn({ onPress }) {
	return (
		<TouchableOpacity onPress={onPress}>
			<Text>Submit</Text>
		</TouchableOpacity>
	);
}

// then below at the bottom of the render
	<View>
		...
		<SubmitBtn onPress={this.submit()} />
	</View>

// Implementing native sliders, which are built-in components in React Native
// in App.js
import { StyleSheet, Text, View, Slider } from 'react-native';

	...
		<View style={styles.container}>
			<Slider
				minimumValue={0}
				maximumValue={10}
				step={1}
				value={this.state.value}
				onValueChange={(value) => this.setState({value})}
			/>
			<Text>
				Value: {this.state.value}
			</Text>
		</View>

// UdaciSlider.js - with the above in mind build out our slider component
import { View, Text, Slider } from 'react-native';
// destructure incoming props (see AddEntry) and render Slider plus display
export default function UdaciSlider({ max, unit, step, value, onChange }) {
	return (
		<View>
			<Slider
				step={step}
				value={value}
				maximumValue={max}
				minimumValue={0}
				onValueChange={onChange}
			/>
			<View>
				<Text>{value}</Text>
				<Text>{unit}</Text>
			</View>
		</View>
	);
}

// UdaciSteppers.js - these are going to be the increment/decrement buttons
import { View, Text, TouchableOpacity } from 'react-native';
import { FontAwesome, Entypo } from '@expo/vector-icons';
// remember what we're passing in - destructure it and render
export default function UdaciSteppers ({ max, unit, step, value, onIncrement, onDecrement }) {
	return (
		<View>
			<View>
				<TouchableOpacity onPress={onDecrement}>
					<FontAwesome name="minus" size={30} color="black" />
				</TouchableOpacity>
				<TouchableOpacity onPress={onIncrement}>
					<FontAwesome name="plus" size={30} color="black" />
				</TouchableOpacity>
			</View>
			<View>
				<Text>{value}</Text>
				<Text>{unit}</Text>
			</View>
		</View>
	)
}

// AddEntry.js - confirmation with a reset text button
import { Ionicons } from '@expo/vector-icons';
import TextButton from './TextButton'; 	// we write this component below
...
	reset = () => { 								// to pass to our TextButton on press
		const key = timeToString();
		
		// Update Redux
		
		// Route to home
		
		// Update db

	};

	render() {
		const metaInfo = getMetricMetaInfo();
		if (this.props.alreadyLogged) {
			return (
				<View>
					<Ionicons
						name='ios-happy-outline'
						size={100}
					/>
					<Text>You already logged your info for today</Text>
					<TextButton onPress={this.reset}>Reset</TextButton>
				</View>
			);
		}
...

// create TextButton.js - text button to be reused a few other places in app
import React from 'react';
import { Text, TouchableOpacity } from 'react-native';

export default function TextButton ({ children, onPress }) { 		// children for rendering as nested text
	return (
		<TouchableOpacity onPress={onPress}>
			<Text>{children}</Text>
		</TouchableOpacity>
	);
}


/* Pause UdaciFitness for the rest of this section - let's talk about a few other necessary components first

	Think for a moment about most mobile apps:
		- they're just lists of data
		- the data change
		- the app decides how it should display that changing data to user

	So let's play with how we display performant lists inside of React Native
 */
// IMAGINE an App.js that displays data from a reviews.js that returns an object with user reviews
import React from 'react';
import { View, Text, StyleSheet, Image } from 'react-native';
import getReviews from './reviews';
function Review ({ name, text, avatar }) {
	return (
		<View style={styles.review}>
			<Image source={{uri: avatar}} style={styles.avatar}/>
			<View style={{flex: 1, flexWrap: 'wrap'}}>
				<Text style={fontSize: 20}>{name}</Text>
				<Text>{text}</Text>
			</View>
		</View>
	);
}
export default class App extends React.Component {
	render() {
		const reviews = getReviews();
		return (
			<View style={styles.container}>
				{reviews.map(({ name, text, avatar}) => <Review key={name} name={name} text={text} avatar={avatar} />)}
			</View>
		);
	}
}

// the above works but we CAN'T scroll!
	// - the View is confined to the area on the screen
	// - so instead we can wrap our list inside of a ScrollView
import { View, Text, StyleSheet, Image, ScrollView } from 'react-native';
...
			<ScrollView style={styles.container}>
				{reviews.map(({ name, text, avatar}) => <Review key={name} name={name} text={text} avatar={avatar} />)}
			</ScrollView>
...

// but ScrollView renders each item in list regardless if user can see it or not
	// - wait that's not very performant!
	// - true, so why don't we just render what the user can currently see?
	// - FlatList component just renders items user can currently see
	// - FlatList needs some data and renderItem method responsible for rendering each iteration on that data
import { View, Text, StyleSheet, Image, FlatList } from 'react-native';
...
	renderItem = ({ item }) => {
		return (<Review key={name} name={name} text={text} avatar={avatar} />);
	};
	...
			<View style={styles.container}>
				<FlatList data={reviews} renderItem={this.renderItem} />
			</View>
		);
	}
}

// BUT that could be written more succintly like this
	...
	renderItem = ({ item }) => {
		return (<Review {...item} />);
	};
	...
// now if you load on actual phone scrolling thru long list, notice huge performance gain!

// There's also SectionList - supports adding section headers to a list (unlike FlatList)
// https://facebook.github.io/react-native/docs/sectionlist.html


/* Still Paused - let's talk about forms
		- work like you know, where component is single source of truth for a form
		- a few you need to know: TextInput, KeyboardAvoidingView, Slider, Switch
		- note that TextInput supports BOTH onChange and onChangeText
			- onChangeText just passes along the text value as arg
			- onChange passes along the entire event object as arg
 */
import React from 'react';
import { Text, View, StyleSheet, Switch, TextInput, KeyboardAvoidingView, Image } from 'react-native';

export default class App extends React.Component {
	state = {
		input: '@mytwitterhandle',
		showInput: false
	}
	handleToggleSwitch = () => {
		this.setState((state) => ({
			showInput: !state.showInput,
		}));
	};
	handleTextChange = (input) => {
		this.setState(() => ({
			input
		}));
	};
	render() {
		const { input, showInput } = this.state; 
		// show or hide TextInput based on a toggle button and update state on textchange
		return (
			<View style={styles.container}>
				<Image
					source={{uri: 'example.com/someimgurl.png'}}
					style={styles.img}
				/>
				<Switch
					value={showInput}
					onValueChange={this.handleToggleSwitch}
				/>
				{showInput && (
					<TextInput
						value={input}
						style={styles.input}
						onChangeText={this.handleTextChange}
					/>
				)}
			</View>
		);
	}
}

// PROBLEM above: when keyboard comes up, it hides the TextInput!
// fortunately Reat Native has a KeyboardAvoidingView
	// - replace normal view with it
	// - behavior specifies how it will avoid
	...
			<KeyboardAvoidingView behavior="padding" style={styles.container}>
				<Image
					source={{uri: 'example.com/someimgurl.png'}}
					style={styles.img}
				/>
				<Switch
					value={showInput}
					onValueChange={this.handleToggleSwitch}
				/>
				{showInput && (
					<TextInput
						value={input}
						style={styles.input}
						onChange={this.handleTextChange}
					/>
				)}
			</KeyboardAvoidingView>
	...

// finally let's show an image within a view
// - first from local
import React from 'react';
import { Text, View, StyleSheet, Image } from 'react-native';
export default class App extends React.Component {
	render() {
		return (
			<View style={styles.container}>
				<Image style={styles.img} source={require('./path/file.png')} />
			</View>
		);
	}
}

// - now from image hosted on external source somewhere
import React from 'react';
import { Text, View, StyleSheet, Image } from 'react-native';
export default class App extends React.Component {
	render() {
		return (
			<View style={styles.container}>
				<Image style={styles.img} source={require('./path/file.png')} />
				<Image style={{margin: 50}} />
				<Image style={styles.img} source={{uri: 'https://specificurl.com/imagename.png'}} />
			</View>
		);
	}
}




/* 4. AsyncStorage
 */